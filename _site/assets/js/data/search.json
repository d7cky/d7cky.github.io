[
  
  {
    "title": "Usage",
    "url": "/posts/usage/",
    "categories": "Hack The Box",
    "tags": "HTB Usage",
    "date": "2024-10-11 00:00:00 +0700",
    





    "snippet": "Mô tả🤟🏻🤟🏻🤟🏻 Yeah vào thứ 6 ngày 11 chứ k phải 13 nhé 👻, sau khi hoàn thành công việc được giao ở cty còn chút thời gian buổi chiều mình làm nhẹ một bài HackTheBox, như bạn đã biết và tìm kiếm về nó thì đúng rồi bài HTB này có tên là Usage.Đọc sơ về thông tin machine tôi biết được rằng machine này là một linux server và đang deploy một web site blog có tồn tại lỗ hổng SQL Injection. Và còn nhiều điều thú vị khác như hình bên dưới.AttackStart machine tôi nhận được một IP: 10.129.5.101ReconNhư các thanh niên mới tập tành làm hacker, tôi tiến hành scan nmap để xem ip trên đang chạy những dịch vụ nào.Việc scan nmap trên máy tôi có vẻ khá lâu, trong lúc chờ đợi thử truy cập ip đó vơi port 80 vào trình duyệt thử xem có gì hay ho khum (bản năng của một web application pentester).Tôi bị dì đai déc (redirect) qa domain usage.htb như hình trên. Không lẽ phải khai báo host cho ip đó thì mới có thể truy cập được hay sao ? Thử khai báo thêm host (cho bạn nào chưa biết, các bạn có thể khai báo host tại file /etc/hosts đối với linux, còn windows bạn có thể google thêm nhé, mình qên mất path windows rầu 😅) và truy cập lại xem như thế nào nhé.May quá tôi truy cập được rồi. Cùng lúc đó nmap của tôi cũng đã cho kết quả.Tiến hành scan sâu thêm xíu để lấy thêm một vài thông tin về 2 dịch vụ 22 và 80.Cũng không có gì qá đặc sắc, quay lại vs cái site usage.htb tôi vừa truy cập được.Đi một vòng site đó tôi collect lại các endpoint như sau:GET: /dashboardGET: /loginGET: /registrationGET: /forget-passwordGET: admin.usage.htb/POST: /post-loginPOST: /post-registrationPOST: /forget-passwordFuzzingTừ kinh nghiệm non nớt của một redteam mới vào nghề, tôi sẽ ưu tiên fuzz các lỗ hổng server side trước để nhanh chóng RCE được. Các payload cơ bản của các bug server side đều có sẵn ở seclists.Fuzz qua một vòng tôi đã phát hiện lỗ hổng SQLi ở form forget password. Lười khai thác quá :))) =&amp;gt; SQLMAP cho lẹ thôi 🤣🤣🤣SQL InjectionKết quả SQLmap đã ra như v rồi thì còn nghi ngờ gì nữa mà k attack thẳng luôn ☺️Thêm các option tools gợi ý và xúc thôiỞ đây mình trỏ proxy về burp cho dễ theo dõi payload.Sqlmap chạy khá lâu nên mình đã đi cf một lúc :))). Sau khi cf về thì kết quả cho thấy chúng ta có một SQLi blind với cơ sở dữ liệu là mysqlLại phải trông cậy vào sqlmap để dump db về thôi chứ mình lười khai thác tay hoặc viết tool quá kkkk.Số trời bắt mình phải khai thác bằng tay rồi các bạn ơi. Dump sử dụng cả wordlist nhưng vẫn không thành công.Thôi thì mình sẽ tận dụng lại cái payload mà sqlmap cung cấp để khai thác tiếp bằng tay (manual) vậy.Tổng hợp lại một tí thì đâu là SQLi blind và payload mà sqlmap cung cấp ở dạng error base. Mình paste lại payload để phân tích một tý.&#39; AND EXTRACTVALUE(9050,CASE WHEN (9050=9050) THEN 9050 ELSE 0x3A END) AND &#39;iBUN&#39;=&#39;iBUNNó sử dụng hàm EXTRACTVALUE, đây là một hàm trong hầu hết cơ sở dữ liệu mà cụ thể ở đây là mysql. Nó dùng để lấy dự liệu từ một tài liệu XML với 2 tham số đầu vào.Tham số đầu tiên thường sẽ là một tài liệu XML hoặc là một số bất kỳ nào đó.Tham số thứ 2 sẽ là XPATH trỏ đến tài liệu đó.Trong payload này 2 tham số lần lượt sẽ là 9050 và CASE WHEN (9050=9050) THEN 9050 ELSE 0x3A END)Mình sẽ phân tích vào tham số thứ 2 nhé. Đây là một biểu thức điều kiện, nếu 9050=9050 =&amp;gt; luôn đúng thì sẽ trả về 9050 ngược lại sẽ trả về 0x3A là mã hex của :.Bỏ vào burp thử chúng ta sẽ nhận ra rằng trong trường hợp đúng response sẽ có mã 302 ngược lại sẽ là 500.OK. Bây giờ sẽ edit lại payload để get version thử nhé. Trước tiên mình sẽ tìm độ dài của version sẽ có bao nhiêu ký tự và payload tìm độ dài như sau:&#39; AND EXTRACTVALUE(9050,CASE WHEN ((select length(@@version))&amp;gt;20) THEN 9050 ELSE 0x3A END) AND &#39;iBUN&#39;=&#39;iBUNKết quả của payload trên trả về 302 có nghĩa là đúng, độ dài của version mysql lớn hơn 20 ký tự. Tiếp tục fuzz đến khi nào ra độ dài chính xác thì thôi. =&amp;gt; độ dài chính xác là 23Mục tiêu chính của mình đâu phải chỉ tìm version đâu đúng k ? Cho nên việc xác định độ dài chỉ để chứng minh rằng idea sửa payload của mình thành công. Tiếp tục với idea đó mình sẽ đi tìm tất cả các table có trong db mysql.Với payload dưới đây mình sẽ sử dụng intruder của burp để bruteforce từng ký tự với độ dài 371 cho mỗi vị trí của các table có trong db mysql. Payload: ` AND EXTRACTVALUE(9050,CASE WHEN ((select substr(group_concat(table_name),1,1) from information_schema.tables WHERE table_schema != ‘information_schema’)=’g’) THEN 9050 ELSE 0x3A END) AND ‘iBUN’=’iBUN`.Ngol lành, sếp xếp lại 1 tý để có full table thôi nào.Và đây là danh sách table có trong db mysql mà mình vừa dump được.global_status,global_variables,persisted_variables,processlist,session_account_connect_attrs,session_status,session_variables,variables_info,admin_menu,admin_operation_log,admin_permissions,admin_role_menu,admin_role_permissions,admin_role_users,admin_roles,admin_user_permissions,admin_users,blog,failed_jobs,migrations,password_reset_tokens,personal_access_tokens,usersTừ đây mình sẽ focus vào 2 table admin_user và users đầu tiên đến xem húp được gì không. Tiếp tục tìm column và dump data 2 table đó.  Column name table users: id,name,email,email_verified_at,password,remember_token,created_at,updated_atColumn name table admin_users: Id,username,password,name,avatar,remember_token,created_at,updated_atBảng admin_users chỉ có đúng một dòng với user,pass: admin:$2y$10$ohq2klpbh/ri.p5wr0p3uomc24ydvl9da9h1s6ooomgh5xvfuprl2Đã có pass dạng hash, mình k biết đây là dạng mã hoá nào. Thôi thử cứ để hashcat detect xem sao. Nhưng trước tiên tôi sẽ thử với các công cụ online trước.Công cụ crack online bảo mình rằng đây là một bcrypt nhưng nó k crack được. Thôi thì mình sẽ thử với công cụ thần thánh hashcat xem sao.Sau gần 3 tiếng ngồi crack bằng hashcat nhưng vẫn không nhận được kết quả, mình chuyển sang hướng tim các user thường xem có idea gì mới không.Quay lại với bảng users.  Đã tìm được thông tin các user trong bảng usersraj@raj.com:$2y$10$7almtteyfrvd8rnyep/ck.bsfkfxfsltplkyqqsp/tt7x1wapjt4.raj@usage.htb:$2y$10$rbncgxpwp1hspo1gqx4upo.pdg1nszoi/uhwhvfhddfdfo9vmdjsaa@gmail.com:$2y$10$40rwm43ejd7p04jgtvdm7exuw1ygu7thg5r6bwmtwgmkiegpg.zayb@gmail.com:$2y$10$nctkiwzoakyk0jhvstkhfonm6qvoeoodklb8ymisv69bwhgsyjko6Ngoại trừ 2 account a và b mình tạo ra thì còn lại 2 account raj@raj.com và raj@usage.htb. Thử crack bcrypt của nó xem như thế nào ?Hashcat chạy quá lâu, mà mình quên mất ngoài hashcat ra thì vẫn còn john ripper thần thánh. Chuyển qua sử dụng john xem có tiến triển gì hơn khum.Trời thật không phụ lòng người, cuối cùng cũng crack được pass admin. Login tìm đường RCE thôi nào !!!!Ngol lành luôn.Sau khi đi 1 vòng tất cả các chứng năng sau khi login. Thì chỉ có form tạo hoặc sửa user là có chức năng upload =&amp;gt; có khả năng lên shell.Tuy nhiên đời k như là mơ. Chức năng có cũng như không. API thì chạy nhưng user lại k được tạo ra. ĐI theo avatar của user admin để tìm nơi chứa hình ảnh đã up để trigger shell nhưng cũng k được. =&amp;gt; Quay xe thôi.Quay lại quá trình recon web ban đầu. Mình vẫn còn các version chưa biết cũ mới. Đầu tiên là nginx 1.18.0Khả năng cao là có CVE vì mình nghi đây chưa phải version latest. Google xíu nào.POC các thứ 1 hồi vẫn k ăn thua =&amp;gt; Lại quay xe tìm được khác thôi.Như hình trên thì version của PHP vs Laravel chưa được list ra. À há hình như khi login vào dashboard nó được hiện thị.PHP 8.1.2 có vẻ khá to. Thôi thử tìm Laravel xem s, nhìn ver nhỏ hơn nhiều so với latest.Nó đây rồi, thử xem POC được khum nha.Lại khó rồi mình thiếu file .log của laravel nên khó mà POC được. Thôi thì bung js ra đọc thôi.Vì endpoint mình cũng đã đi hết rồi, tìm version POC CVE thì cũng vậy. =&amp;gt; Việc đọc js để tìm gì nhỉ ? kkkkk tất nhiên là sẽ tìm những endpoint hoặc version ẩn nào đó. Ắt hẳn là các bạn đang thắc mắc version ẩn là gì đúng không. Vì đây là CMS Laravel nó na ná như Wordpress vậy á nên việc quản trị viên sử dụng thêm các plugin thứ 3 là có thể có.Search keyword version thì có 3 kết quả.2 kết quả đầu đã được hiện thị ở dashboard rồi. Vậy còn kết quả thứ 3 là gì nhỉ ?Version 1.8.17 nhưng của cái gì thì mình cũng k rõ chỉ đoán đây là 1 plugin nào đó của Laravel. Không biết thì google thôi chứ dì đou mà ngại kkkkNgồi google một lúc lâu mới phát hiện version 1.8.17 này là của laravel-admin. May thay mình đi lòng vòng trên không gian mạng thì lòi ra được cái site nói về CVE của laravel-admin này. Nó lại còn có ví dụ ik chang cái site mình đang attack nữa chứ.Á đù nó chính là cái chức năng upload mà hồi nãy mình đã attack nhưng nghĩ nó k work. Làm theo sách giao khoa không up shell được thì bây giờ mình thử làm theo cuốn chân kinh mình mới tìm được xem sao nhỉ.Yeah cuối cùng cũng lên được con shell ghẻ kkkk.  Loay hoay 1 hồi vào đọc chân kinh mới ngộ ra rằng. Cái chức năng upload ở function tạo user k work thiệt. Mà phải sử dụng chức năng upload ở function edit user admin.Khi lên được shell thì việc lấy flag đầu tiên ez rồi.Privilege EscalationHình như khu vực nơi chứa file upload của admin đang được chạy 1 script auto tạo lại file avatar của admin. Nên cứ up web shell lên chưa được 10p thì web shell của mình bị xoá và trở lại là hình avatar của admin. Hơi khó chẹo nên mình quyết định sẽ up một con reverse shell vào thư mục /tmp.OK, có revershell thành công. Nhưng con reverseshell này vẫn còn khó chẹo, mình k thể sudo hay làm 1 vài thao tác nâng cao. Nên chắc mình sẽ tìm cách get đúng shell của user dash trước khi leo quyền.Idea cơ bản nhất là mình sẽ tìm cách lấy key ssh vì hồi lúc recon mình nhớ vẫn còn port 22 chưa đụng đến.Yeah đi vào profile user và thư mục mặc định của ssh là sẽ thấy thôi. (/home/user/.ssh/).Yeah ngol lành, bắt cái thang lên leo thôi.Gần như các kỹ thuật leo quyền cơ bản đều không khả dụng trong trường hợp này.Yeah các binary dưới đây đang được chạy với quyền root. Tìm cách húp nó thôi.Mình sẽ focus vào các binary trong nhóm /usr/bin trước. Mình nghĩ đa số các binary này đã từng có ít nhất 1 CVE nào đó. Thôi thì mình sẽ check version của từng binary rồi so với các CVE của chúng thử xem có thể khai thác cái nào hay k nhé.Đi một vòng thì mình phát hiện ra thằng pkexec có vẻ phù hợp và cũng có sẵn POC trên git luôn. Chờ dì nữa mà k thử exploit.Tưởng dễ ăn nhưng vẫn k ăn được. Lại phải quay xe. Chợt nhớ ra tôi chưa kiểm tra xem internal có đang mở port nào có thể tunnel ra ngoài được khum nhỉ ?Vẫn không tìm thấy gì hot haizzz. Quằng quá bỏ đi chơi ……Sau khi đi chơi về mình lại tiếp tục connect vào ssh và đi lòng vòng xem có gì hot để khai thác không. Lần này mình mò lòng vòng trong src web lẫn profile user. Mặc dù mang tiếng là dùng linux nhiều hơn dùng win nhưng nhìn vào profile user vẫn có nhiều file mình không thể hiểu được.Mình thắc mắc các file như .lesshst, monit* là gì nhỉ ? Không hiểu thì hỏi thôi, đem lên google hỏi nào.Thì ra file .lesshst là file lịch sử được tạo ra bởi lệnh less.Còn các file .monit* là do server đang chạy một dịch vụ monitor (giám sát) mã nguồn mở. Nó được sử dụng để theo dõi và quản lý các dịch vụ, tiến trình, và tài nguyên hệ thống trên các hệ điều hành giống Unix. Google sâu về dịch vụ này thì mình thấy thông thường nó sẽ open một port 2812 để quản trị viên có thể dễ dàng quản trị server từ xa thông qua trình duyệt. Thế thì ngại gì mà k thử truy cập vào port đó xem ntn nhỉ.Lười mở trình duyệt qá nên mình dùng curl luôn. Nó kêu mình k có quyền. Mình đang đứng ở server chạy nó mà nó dám làm khó mình. Đọc thử các file monit* xem có gì hot nào.Ối có tài khoản admin kìa.Hmmm, trình duyệt thì k dùng được thế thì tài khoản này dùng để làm gì cà ? Mình vẫn còn tài khoản xander và root chưa login được. Nhưng tài khoản dash mình vẫn chưa có password. Thử hết cả 3 tài khoản xem ntn.Nó là thằng xander. Thằng này có dì nhỉ. Lại mò profile nó thôi kkkkkMặc dù biết là k được đâu nhưng vẫn cố chấp xem ntn kkkkLeo root đã trở nên dễ dàng hơn khi bạn có password và chạy được lệnh sudo -l 🤣🤣🤣Nó là một file binary do quản trị dev. Hmm k lẽ RE file này để đọc code nó ta 🤔. Thử strings nó ra trước xem có chuỗi j hay ho k đã.Hên quá cũng có nội dung mình cần. Option 1 thì nó dùng 7za để nén file như mình đã tô trắng trên hình. Option 2 thì nó dùng mysqldump để dump file .sql cách đó 2 dòng.Nhìn vào 3 dòng này mình đoán là khi chạy option 1 nó sẽ nén thư mục /var/www/html thành file /var/backups/project.zip.Điều mình quan tâm ở đây là dấu wildcard *. Nó sẽ thêm tất cả các thư mục hoặc file ở thư mục hiện tại vào file zip. Vậy giả sử thư mục hiện tại chính là thư mục /root thì sẽ như thế nào nhỉ ?Idea ở đây là mình sẽ sử dụng một symbol link trỏ từ /root đến /var/www/html.Việc còn lại là mình giải nén file zip đó ra là sẽ lấy được flag bên trong thư mục /rootNhưng chuyện không dễ đến thế mình lại k có quyền giải nén nó. Hmmm quay lại đọc hướng dẫn sử dụng của 7za vậy.Yeah ✌🏻✌🏻✌🏻 thành công. Done.Kết luậnFlag 1ba52a4d7c85dc89d0e3433fdfc8d2f58Flag 2328080f50550138cc4d1cfeddabf81ac"
  },
  
  {
    "title": "Under Construction",
    "url": "/posts/under-construction/",
    "categories": "",
    "tags": "",
    "date": "2022-02-02 00:00:00 +0700",
    





    "snippet": "HTB-Under-ConstructionVào dịp cuối năm trong lúc mọi người đang bận rộn dọn dẹp nhà cửa, sắp sửa đồ mới đón tết thì mình nhận được một challenge HackTheBox ở mức medium từ một người anh vừa mới quen qua một nhóm học tập trên facebook.Challenge này cho mình hẳn source web, sau khi tải source về và wow NodeJs, mình mù tịt với ngôn ngữ này :((. Đi sơ qua một vòng mình thấy có 2 file JWWTHelper.js và DBHelper.js làm mình nghĩ đến JWT attack và SQL injection. Đọc qua file DBHelper.js thấy được các câu truy vấn không được lọc kĩ càng gì cả. Nhưng mình lại chưa biết làm thế nào để có thể inject vào các câu truy vấn đó được. Thôi thì quay qua đọc file JWTHelper.js xem như thế nào.Có vẻ như là public key được lồng ở trong token của user (mình đoán vậy kkkk). Để chắc chắn cho suy đoán của mình thì mình đã đăng ký một user và đăng nhập với user vừa tạo để lấy giá trị session đem lên JWT.io kiểm chứng.Bởi vì có public key nên mình nghĩ chắc chắn phải có gì đó liên quan đến authen. Thử google một vòng với từ khoá JWT authen attack. Mình phát hiện được hacktricks có viết về kĩ thuật thay đổi thuật toán từ RS256 sang HS256. Check lại thuật toán JWT ở challenge này thì tình cờ thấy nó dùng thuật toán HS256. Google theo kĩ thuật này mình đã được thông não.Do thuật toán HS256 sử dụng khoá bí mật để đánh dấu và xác thực mỗi message, còn thuật toán RS256 thì sử dụng private key để đánh dấu message và public key để xác thực athen. Vì vậy, nếu thay đổi từ thuật toán RS256 sang HS256 thì public key sẽ được sử dụng như khoá bí mật và khi đó thuật toán HS256 dùng để xác thực chữ ký.Sau khi thực hiện theo các bước ở site trên mình đã tạo ra được một token mới với thuật toán HS256 và user admin. Tiến hành inject token mới để bypass authen thì mình lại nhận được một kết quả khá là hụt hẫn với thông tin là user admin không tồn tại :((((.Trong message ở hình trên có nhắc đến database mình nghĩ ngay đến file DBHelper.js lúc nãy. Trong file mình thấy có hàm checkUser. Mình đoán kiểu gì khi login hàm này cũng được gọi ra.Với kinh nghiệm đã từng dev web laravel mình check thử một vòng trong thư mục routes. Cuối cùng mình cũng đã tìm được route login.Khi login hàm checkUser sẽ được gọi ra và truy vấn xuống database. Input truyền vào chính là username nằm trong phần data của token.Mình cũng không rõ lắm về cú pháp của sqlite nên mình chèn đại cú pháp union của mysql xem kết quả trả về như thế nào :))).Wow chính nó, chính là sql injection đây mà. Do không rành về cú pháp sqlite nên mình google dùng một vài payload trên git.Thả nhẹ payload Extract table name thì mình có được table flag_storageHy vọng flag nằm trong table này. Minh tiếp tục lấy cột trong table và nội dung của cột chứa flag.Đem flag vừa tìm lên HTB submit  thành công.POCCám ơn các bạn đã ghé qua đây :))))"
  },
  
  {
    "title": "Enable Google Page Views",
    "url": "/posts/enable-google-pv/",
    "categories": "Blogging, Tutorial",
    "tags": "google analytics, pageviews",
    "date": "2021-01-04 06:32:00 +0700",
    





    "snippet": "This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well.  Head to https://analytics.google.com/ and click on Start Measuring  Enter your desired Account Name and choose the desired checkboxes  Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard  Enter the required information About your business  Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps:  Go to Admin on the left column  Select the desired property from the drop-down on the second column  Click on Data Streams  Add a stream and click on Web  Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml filegoogle_analytics:  id: &#39;G-V6XXXXXXX&#39;   # fill in your Google Analytics ID  # Google Analytics pageviews report settings  pv:    proxy_endpoint:   # fill in the Google Analytics superProxy endpoint of Google App Engine    cache_path:       # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine      Visit https://console.cloud.google.com/appengine        Click on Create Application        Click on Create Project        Enter the name and choose the data center close to you        Select Python language and Standard environment        Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient.        Go to your App Engine dashboard on your browser and select API &amp;amp; Services from the left navigation menu        Click on Enable APIs and Services button on the top        Enable the following APIs: Google Analytics API        On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status        Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&amp;lt;project-id&amp;gt;.&amp;lt;region&amp;gt;.r.appspot.com/admin/auth        Note down the Your Client ID and Your Client Secret. You’ll need this in the next section.        Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart        Run the following commands:    [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser:    https://accounts.google.com/o/oauth2/auth?response_type=code&amp;amp;client_id=XYZ.apps.googleusercontent.com&amp;amp;redirect_uri=ABCDEFGEnter verification code: &amp;lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&amp;gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here      Setup Google Analytics superProxy      Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local.        Remove the first 2 lines in the src/app.yaml file:    - application: your-project-id- version: 1            In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard.        Enter any random key for XSRF_KEY, your config.py should look similar to this    #!/usr/bin/python2.7__author__ = &#39;pete.frisella@gmail.com (Pete Frisella)&#39;# OAuth 2.0 Client SettingsAUTH_CONFIG = {  &#39;OAUTH_CLIENT_ID&#39;: &#39;YOUR_CLIENT_ID&#39;,  &#39;OAUTH_CLIENT_SECRET&#39;: &#39;YOUR_CLIENT_SECRET&#39;,  &#39;OAUTH_REDIRECT_URI&#39;: &#39;%s%s&#39; % (    &#39;https://chirpy-test-XXXXXX.ue.r.appspot.com&#39;,    &#39;/admin/auth&#39;  )}# XSRF SettingsXSRF_KEY = &#39;OnceUponATimeThereLivedALegend&#39;        Tip: You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com. But, for the sake of keeping it simple, we will be using the Google provided default URL.        From inside the src/ directory, deploy the app    [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor:      [/tmp/google-analytics-super-proxy/src/app.yaml]source:          [/tmp/google-analytics-super-proxy/src]target project:  [chirpy-test-XXXX]target service:  [default]target version:  [VESRION_NUM]target url:      [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage                 ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse            Visit the deployed service. Add a /admin to the end of the URL.        Click on Authorize Users and make sure to add yourself as a managed user.        If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix.  If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows:  start-date: fill in the first day of blog posting  end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date)  metrics: select ga:pageviews  dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1:      filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=.    Among them, ; means using logical AND to concatenate two rules.    If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl.  After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics:  id: &#39;G-V6XXXXXXX&#39;   # fill in your Google Analytics ID  pv:    proxy_endpoint: &#39;https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&amp;lt;ID FROM SUPER PROXY&amp;gt;&#39;    cache_path:       # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference            Google Analytics Core Reporting API: Filters &amp;#8617;&amp;#xfe0e;      "
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-10 23:34:00 +0700",
    





    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (PNG and ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        Note: ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 19:55:00 +0700",
    





    "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler.InstallationCreating a New SiteThere are two ways to create a new repository for this theme:  Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing.  Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &amp;lt;GH_USERNAME&amp;gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &amp;lt;GH_USERNAME&amp;gt;.github.io. Please note that the default branch code is in development.  If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh  Note: If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will:  Removes some files or directories from your repository:          .travis.yml      files under _posts      folder docs            If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github.        Removes item Gemfile.lock from .gitignore.    Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options:  url  avatar  timezone  langCustoming StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\    --volume=&quot;$PWD:/srv/jekyll&quot; \\    -p 4000:4000 jekyll/jekyll \\    jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using Github ActionsFor security reasons, GitHub Pages build runs on safe mode, which restricts us from using plugins to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the GitHub Pages service.Quickly check the files needed for GitHub Actions build:      Ensure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name.        Ensure your Jekyll site has file tools/deploy.sh. Otherwise, copy it from here to your Jekyll site.        Furthermore, if you have committed Gemfile.lock to the repo, and your runtime system is not Linux, don’t forget to update the platform list in the lock file:    $ bundle lock --add-platform x86_64-linux      After the above steps, rename your repository to &amp;lt;GH_USERNAME&amp;gt;.github.io on GitHub.Now publish your Jekyll site by:      Push any commit to remote to trigger the GitHub Actions workflow. Once the build is complete and successful, a new remote branch named gh-pages will appear to store the built site files.        Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar, and then in the section Source of GitHub Pages, select the /(root) directory of branch gh-pages as the publishing source. Remember to click Save before leaving.            Visit your website at the address indicated by GitHub.  Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\    --env JEKYLL_ENV=production \\    --volume=&quot;$PWD:/srv/jekyll&quot; \\    jekyll/jekyll \\    jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme:      If you are using the theme gem (there will be gem &quot;jekyll-theme-chirpy&quot; in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example:    - gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.2&quot;, &quot;&amp;gt;= 3.2.1&quot;+ gem &quot;jekyll-theme-chirpy&quot;, &quot;~&amp;gt; 3.3&quot;, &quot;&amp;gt;= 3.3.0&quot;        And then execute the following command:    $ bundle update jekyll-theme-chirpy        As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme.        If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts.  "
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 13:10:00 +0700",
    





    "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  Note: The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:---author:  name: Full Name  link: https://example.com---Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=&quot;700&quot; height=&quot;400&quot; }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=&quot;700&quot; h=&quot;400&quot; }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. For example:      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }        Limitation: Once the position of the image is specified, the image caption should not be added.ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&amp;lt;img src=&quot;https://cdn.com/path/to/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&amp;lt;img src=&quot;/img/path/flower.png&quot; alt=&quot;The flower&quot;&amp;gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute src, width, height, and alt for the image:---image:  src: /path/to/image/file  width: 1000   # in pixels  height: 400   # in pixels  alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the  attribute src only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---Code BlockMarkdown symbols ``` can easily create a code block as follows:This is a plaintext code snippet.Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  Limitation: The Jekyll style highlight tag is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of the code block, you can append {: .nolineno} at the next line:```shellecho &#39;No more line numbers!&#39;```{: .nolineno}Specifying the FilenameYou may have noticed that the code language will be displayed on the left side of the header of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=&quot;path/to/file&quot; }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains &#39;Pack&#39; %}  This product&#39;s title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 10:33:00 +0700",
    





    "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    Task list  TODO  Completed  Defeat COVID-19          Vaccine production      Economic recovery      People smile again      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line to shows the Block Quote.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images  Default (with caption)Full screen width and center alignment  Shadowshadow effect (visible in light mode)  Left aligned      Float to left    “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.”        Float to right    “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.”  Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then    echo &quot;The command was not successful.&quot;;    #do the needful / exitfi;Specific filename@import  &quot;colors/light-typography&quot;,  &quot;colors/dark-typography&quot;Reverse Footnote            The footnote source &amp;#8617;&amp;#xfe0e;              The 2nd footnote source &amp;#8617;&amp;#xfe0e;      "
  }
  
]

